.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WordNet::Similarity::DepthFinder 3pm"
.TH WordNet::Similarity::DepthFinder 3pm "2008-05-23" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WordNet::Similarity::DepthFinder \- methods to find the depth of synsets in
WordNet taxonomies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use WordNet::QueryData;
\& my $wn = WordNet::QueryData\->new;
\& defined $wn or die "Construction of WordNet::QueryData failed";
\&
\& use WordNet::Similarity::DepthFinder;
\&
\& my $obj = WordNet::Similarity::DepthFinder\->new ($wn);
\& my ($err, $errString) = $obj\->getError ();
\& $err and die $errString;
\&
\& my $wps1 = \*(Aqcar#n#4\*(Aq;
\& my $wps2 = \*(Aqoil#n#1\*(Aq;
\&
\& my $offset1 = $wn \-> offset ($wps1);
\& my $offset2= $wn \-> offset ($wps2);
\&
\& my @roots = $obj\->getTaxonomies ($offset1, \*(Aqn\*(Aq);
\& my $taxonomy_depth = $obj\->getTaxonomyDepth ($roots[0], \*(Aqn\*(Aq);
\& print "The maximum depth of the taxonomy where $wps1 is found is $taxonomy_depth\en";
\&
\& my @depths = $obj\->getSynsetDepth ($offset1, \*(Aqn\*(Aq);
\& print "The depth of $offset1 is $depths[0]\->[0]\en";
\&
\& my @lcsbyic = $obj \-> getLCSbyDepth($wps1,$wps2,\*(Aqn\*(Aq,\*(Aqwps\*(Aq);
\& print "$wps1 and $wps2 have LCS $lcsbyic[0]\->[0] with Depth $lcsbyic[0]\->[1]\en";
\&
\& my @lcsbyic = $obj \-> getLCSbyDepth($offset1,$offset2,\*(Aqn\*(Aq,\*(Aqoffset\*(Aq);
\& print "$offset1 and $offset2 have LCS $lcsbyic[0]\->[0] with Depth $lcsbyic[0]\->[1]\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The following methods are provided by this module:
.ie n .IP "$obj\->initialize ($configfile)" 4
.el .IP "\f(CW$obj\fR\->initialize ($configfile)" 4
.IX Item "$obj->initialize ($configfile)"
Overrides the initialize method in WordNet::Similarity to look for and
process depths files.  The initialize method of the superclass is also called.
.ie n .IP "$obj\->getSynsetDepth ($offset, $pos)" 4
.el .IP "\f(CW$obj\fR\->getSynsetDepth ($offset, \f(CW$pos\fR)" 4
.IX Item "$obj->getSynsetDepth ($offset, $pos)"
Returns the depth(s) of the synset denoted by \f(CW$offset\fR and \f(CW$pos\fR.  The return
value is a list of references to arrays.  Each array has the form
(depth,\ root).
.ie n .IP "$obj\->getTaxonomyDepth ($offset, $pos)" 4
.el .IP "\f(CW$obj\fR\->getTaxonomyDepth ($offset, \f(CW$pos\fR)" 4
.IX Item "$obj->getTaxonomyDepth ($offset, $pos)"
Returns the maximum depth of the taxonomy rooted at the synset identified
by \f(CW$offset\fR and \f(CW$pos\fR.  If \f(CW$offset\fR and \f(CW$pos\fR does not identify a root of
a taxonomy, then undef is returned and an error is raised.
.ie n .IP "$obj\->getTaxonomies ($offset, $pos)" 4
.el .IP "\f(CW$obj\fR\->getTaxonomies ($offset, \f(CW$pos\fR)" 4
.IX Item "$obj->getTaxonomies ($offset, $pos)"
Returns a list of the roots of the taxonomies to which the synset identified
by \f(CW$offset\fR and \f(CW$pos\fR belongs.
.ie n .IP "getLCSbyDepth($synset1, $synset2, $pos, $mode)" 4
.el .IP "getLCSbyDepth($synset1, \f(CW$synset2\fR, \f(CW$pos\fR, \f(CW$mode\fR)" 4
.IX Item "getLCSbyDepth($synset1, $synset2, $pos, $mode)"
Given two input synsets, finds the least common subsumer (\s-1LCS\s0) of them.
If there are multiple candidates for the \s-1LCS\s0 (due to multiple inheritance
in WordNet), the \s-1LCS\s0 with the greatest depth is chosen (i.e., the candidate
whose shortest path to the root is the longest).
.Sp
Parameters: a blessed reference, two synsets, a part of speech, and a mode.
The mode must the either the string 'wps' or 'offset'.  If the mode is wps,
then the two input synsets must be in word#pos#sense format.  If the mode
is offset, then the input synsets must be WordNet offsets.
.Sp
Returns: a list of the form ($lcs, \f(CW$depth\fR) where \f(CW$lcs\fR is the \s-1LCS\s0 (in wps
format if mode is 'wps' or an offset if mode is 'offset'.  \f(CW$depth\fR is the
depth of the \s-1LCS\s0 in its taxonomy.  Returns undef on error.
.ie n .IP "$obj\->_processSynsetsFile ($filename)" 4
.el .IP "\f(CW$obj\fR\->_processSynsetsFile ($filename)" 4
.IX Item "$obj->_processSynsetsFile ($filename)"
Reads and processes a synsets file as output by wnDepths.pl
.ie n .IP "$obj\->_processTaxonomyFile ($filename)" 4
.el .IP "\f(CW$obj\fR\->_processTaxonomyFile ($filename)" 4
.IX Item "$obj->_processTaxonomyFile ($filename)"
Reads and processes a taxonomies file as produced by wnDepths.pl
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Ted Pedersen, University of Minnesota Duluth
\& tpederse at d.umn.edu
\&
\& Jason Michelizzi, University of Minnesota Duluth
\& mich0212 at d.umn.edu
.Ve
.SH "BUGS"
.IX Header "BUGS"
None.
.PP
To report bugs, e\-mail tpederse at d.umn.edu or go to
http://groups.yahoo.com/group/wn\-similarity/.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIWordNet::Similarity\fR\|(3)
\&\fIWordNet::Similarity::wup\fR\|(3)
\&\fIWordNet::Similarity::lch\fR\|(3)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005, Ted Pedersen and Jason Michelizzi
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0
or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0 General Public License
for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along
with this program; if not, write to
.PP
.Vb 3
\& The Free Software Foundation, Inc.,
\& 59 Temple Place \- Suite 330,
\& Boston, MA  02111\-1307, USA.
.Ve
.PP
Note: a copy of the \s-1GNU\s0 General Public License is available on the web
at <http://www.gnu.org/licenses/gpl.txt> and is included in this
distribution as \s-1GPL\s0.txt.
