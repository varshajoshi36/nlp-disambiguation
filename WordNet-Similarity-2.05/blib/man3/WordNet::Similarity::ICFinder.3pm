.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WordNet::Similarity::ICFinder 3pm"
.TH WordNet::Similarity::ICFinder 3pm "2008-05-23" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WordNet::Similarity::ICFinder \- a module for finding the information content
of concepts in WordNet
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use WordNet::QueryData;
\& my $wn = WordNet::QueryData\->new;
\& defined $wn or die "Construction of WordNet::QueryData failed";
\&
\& use WordNet::Similarity::ICFinder;
\& my $obj = WordNet::Similarity::ICFinder\->new ($wn);
\& my ($err, $errString) = $obj\->getError ();
\& $err and die $errString;
\&
\& my $wps1 = \*(Aqcat#n#1\*(Aq;
\& my $wps2 = \*(Aqfeline#n#1\*(Aq;
\&
\& my $offset1 = $wn \-> offset ($wps1);
\& my $offset2 = $wn \-> offset ($wps2);
\&
\& # using the wps mode
\&
\& my $ic   = $obj\->IC ($wps1, \*(Aqn\*(Aq, \*(Aqwps\*(Aq);
\& my $prob = $obj\->probability ($wps1, \*(Aqn\*(Aq, \*(Aqwps\*(Aq);
\& my $freq = $obj\->getFrequency ($wps1, \*(Aqn\*(Aq, \*(Aqwps\*(Aq);
\& print "$wps1 has frequency $freq, probability $prob, and IC $ic\en";
\&
\& my $ic   = $obj\->IC ($wps2, \*(Aqn\*(Aq, \*(Aqwps\*(Aq);
\& my $prob = $obj\->probability ($wps2, \*(Aqn\*(Aq, \*(Aqwps\*(Aq);
\& my $freq = $obj\->getFrequency ($wps2, \*(Aqn\*(Aq, \*(Aqwps\*(Aq);
\& print "$wps2 has frequency $freq, probability $prob, and IC $ic\en";
\&
\& my @lcsbyic = $obj \-> getLCSbyIC($wps1,$wps2,\*(Aqn\*(Aq,\*(Aqwps\*(Aq);
\& print "$wps1 and $wps2 have LCS $lcsbyic[0]\->[0] with IC $lcsbyic[0]\->[1]\en";
\&
\& # doing the same thing in the offset mode
\&
\& my $ic   = $obj\->IC ($offset1, \*(Aqn\*(Aq, \*(Aqoffset\*(Aq);
\& my $prob = $obj\->probability ($offset1, \*(Aqn\*(Aq, \*(Aqoffset\*(Aq);
\& my $freq = $obj\->getFrequency ($offset1, \*(Aqn\*(Aq, \*(Aqoffset\*(Aq);
\& print "$offset1 has frequency $freq, probability $prob, and IC $ic\en";
\&
\& my $ic   = $obj\->IC ($offset2, \*(Aqn\*(Aq, \*(Aqoffset\*(Aq);
\& my $prob = $obj\->probability ($offset2, \*(Aqn\*(Aq, \*(Aqoffset\*(Aq);
\& my $freq = $obj\->getFrequency ($offset2, \*(Aqn\*(Aq, \*(Aqoffset\*(Aq);
\& print "$offset2 has frequency $freq, probability $prob, and IC $ic\en";
\&
\& my @lcsbyic = $obj \-> getLCSbyIC($offset1,$offset2,\*(Aqn\*(Aq,\*(Aqwps\*(Aq);
\& print "$offset1 and $offset2 have LCS $lcsbyic[0]\->[0] with IC $lcsbyic[0]\->[1]\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Introduction"
.IX Subsection "Introduction"
Three of the measures provided within the package require information
content values of concepts (WordNet synsets) for computing the semantic
relatedness of concepts. Resnik (1995) describes a method for computing the
information content of concepts from large corpora of text. In order to
compute information content of concepts, according to the method described
in the paper, we require the frequency of occurrence of every concept in a
large corpus of text. We provide these frequency counts to the three
measures (Resnik, Jiang-Conrath and Lin measures) in files that we call
information content files. These files contain a list of WordNet synset
offsets along with their part of speech and frequency count. The files are 
also used to determine the topmost nodes of the noun and verb 'is\-a' 
hierarchies in WordNet. The information content file to be used is specified 
in the configuration file for the measure. If no information content file is 
specified, then the default information content file, generated at the time 
of the installation of the WordNet::Similarity modules, is used. A description 
of the format of these files follows. The \s-1FIRST\s0 \s-1LINE\s0 of this file must contain 
the hash-code of WordNet the the file was created with. This should be present 
as a string of the form
.PP
.Vb 1
\&  wnver::<hashcode>
.Ve
.PP
For example, if WordNet version 2.1 with the hash-code
LL1BZMsWkr0YOuiewfbiL656+Q4 was used for creation of the information content
file, the following line would be present at the start of the information
content file.
.PP
.Vb 1
\&  wnver::LL1BZMsWkr0YOuiewfbiL656+Q4
.Ve
.PP
The rest of the file contains on each line, a WordNet synset offset, 
part-of-speech and a frequency count, of the form
.PP
.Vb 1
\&  <offset><part\-of\-speech> <frequency> [ROOT]
.Ve
.PP
without any leading or trailing spaces. For example, one of the lines of an
information content file may be as follows.
.PP
.Vb 1
\&  63723n 667
.Ve
.PP
where '63723' is a noun synset offset and 667 is its frequency
count. Suppose the noun synset with offset 1740 is the root node of one of 
the noun taxonomies and has a frequency count of 17625. Then this synset would 
appear in an information content file as follows:
.PP
.Vb 1
\&  1740n 17625 ROOT
.Ve
.PP
The \s-1ROOT\s0 tags are extremely significant in determining the top of the 
hierarchies and must not be omitted. Typically, frequency counts for the noun
and verb hierarchies are present in each information content file.
A number of support programs to generate these files from various corpora 
are present in the '/utils' directory of the package. A sample information 
content file has been provided in the '/samples' directory of the package.
.SS "Methods"
.IX Subsection "Methods"
The following methodes are provided by this module.
.PP
\fIPublic Methods\fR
.IX Subsection "Public Methods"
.ie n .IP "$module\->traceOptions ()" 4
.el .IP "\f(CW$module\fR\->traceOptions ()" 4
.IX Item "$module->traceOptions ()"
Prints status of configuration options specific to this module to
the trace string.  This module has only one such options: infocontent.
.ie n .IP "$module\->probability ($synset, $pos, $mode)" 4
.el .IP "\f(CW$module\fR\->probability ($synset, \f(CW$pos\fR, \f(CW$mode\fR)" 4
.IX Item "$module->probability ($synset, $pos, $mode)"
Returns the probability of \f(CW$synset\fR in a corpus (using frequency values
from whatever information content file is being used).  If \f(CW$synset\fR
is a wps string, then \f(CW$mode\fR must be 'wps'; if \f(CW$synset\fR is an offset,
then \f(CW$mode\fR must be 'offset'.
.ie n .IP "$module\->\s-1IC\s0 ($synset, $pos, $mode)" 4
.el .IP "\f(CW$module\fR\->\s-1IC\s0 ($synset, \f(CW$pos\fR, \f(CW$mode\fR)" 4
.IX Item "$module->IC ($synset, $pos, $mode)"
Returns the information content of \f(CW$synset\fR.  If \f(CW$synset\fR is a wps string,
then \f(CW$mode\fR must be 'wps'; if \f(CW$synset\fR is an offset, then \f(CW$mode\fR must be
\&'offset'.
.ie n .IP "$module\->getFrequency ($synset, $pos, $mode)" 4
.el .IP "\f(CW$module\fR\->getFrequency ($synset, \f(CW$pos\fR, \f(CW$mode\fR)" 4
.IX Item "$module->getFrequency ($synset, $pos, $mode)"
Returns the frequency of \f(CW$synset\fR in whatever information content file
is currently being used.
.Sp
If \f(CW$synset\fR is a wps string, then the mode must be 'wps'; if \f(CW$synset\fR
is an offset, then \f(CW$mode\fR must be 'offset'.
.Sp
Usually the \f(CW\*(C`IC()\*(C'\fR and \f(CW\*(C`probability()\*(C'\fR methods will be more useful
than this method.  This method is useful in determining if the
frequency of a synset was 0.
.ie n .IP "getLCSbyIC($synset1, $synset2, $pos, $mode)" 4
.el .IP "getLCSbyIC($synset1, \f(CW$synset2\fR, \f(CW$pos\fR, \f(CW$mode\fR)" 4
.IX Item "getLCSbyIC($synset1, $synset2, $pos, $mode)"
Given two input synsets, finds the least common subsumer (\s-1LCS\s0) of them.  If
there are multiple candidates for the \s-1LCS\s0, the the candidate with the greatest
information content.
.Sp
Parameters: two synsets, a part of speech, and a mode.
.Sp
Returns: a list of the form ($lcs, \f(CW$ic\fR) where \f(CW$lcs\fR is the \s-1LCS\s0 and \f(CW$ic\fR is
the information content of the \s-1LCS\s0.
.ie n .IP "$module\->configure ()" 4
.el .IP "\f(CW$module\fR\->configure ()" 4
.IX Item "$module->configure ()"
Overrides the configure method of WordNet::Similarity to process the
information content file (also calles \fIWordNet::Similarity::configure()\fR
so that all the work done by that method is still accomplished).
.PP
\fIPrivate Methods\fR
.IX Subsection "Private Methods"
.ie n .IP "$module\->_loadInfoContentFile ($file)" 4
.el .IP "\f(CW$module\fR\->_loadInfoContentFile ($file)" 4
.IX Item "$module->_loadInfoContentFile ($file)"
Subroutine to load frequency counts from an information content file.
.ie n .IP "$module\->_isValidInfoContentFile ($filename)" 4
.el .IP "\f(CW$module\fR\->_isValidInfoContentFile ($filename)" 4
.IX Item "$module->_isValidInfoContentFile ($filename)"
Subroutine that checks the validity of an information content file.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\&  Ted Pedersen, University of Minnesota Duluth
\&  tpederse at d.umn.edu
\&
\&  Jason Michelizzi, Univeristy of Minnesota Duluth
\&  mich0212 at d.umn.edu
\&
\&  Siddharth Patwardhan, University of Utah, Salt Lake City
\&  sidd at cs.utah.edu
.Ve
.SH "BUGS"
.IX Header "BUGS"
None.
.PP
To report a bug e\-mail tpederse at d.umn.edu or go to
http://groups.yahoo.com/group/wn\-similarity/.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIWordNet::Similarity\fR\|(3)
\&\fIWordNet::Similarity::res\fR\|(3)
\&\fIWordNet::Similarity::lin\fR\|(3)
\&\fIWordNet::Similarity::jcn\fR\|(3)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005, Ted Pedersen, Jason Michelizzi and Siddharth Patwardhan
.PP
This program is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to
.PP
.Vb 3
\&    The Free Software Foundation, Inc.,
\&    59 Temple Place \- Suite 330,
\&    Boston, MA  02111\-1307, USA.
.Ve
.PP
Note: a copy of the \s-1GNU\s0 General Public License is available on the web
at <http://www.gnu.org/licenses/gpl.txt> and is included in this
distribution as \s-1GPL\s0.txt.
