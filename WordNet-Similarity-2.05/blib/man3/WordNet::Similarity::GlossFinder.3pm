.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WordNet::Similarity::GlossFinder 3pm"
.TH WordNet::Similarity::GlossFinder 3pm "2008-05-23" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WordNet::Similarity::GlossFinder \- module to implement gloss finding methods
for WordNet::Similarity measures of semantic relatedness (specifically, lesk 
and vector)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use WordNet::QueryData;
\&  my $wn = WordNet::QueryData\->new;
\&  defined $wn or die "Construction of WordNet::QueryData failed";
\&
\&  use WordNet::Similarity::GlossFinder;
\&  my $obj = WordNet::Similarity::GlossFinder\->new ($wn);
\&  my ($err, $errString) = $obj\->getError ();
\&  $err and die $errString;
\&
\&  my $wps1 = \*(Aqengland#n#1\*(Aq;
\&  my $wps2 = \*(Aqwinston_churchill#n#1\*(Aq;
\&
\&  # get the glosses of these two synsets, since we are not using a 
\&  # configuation file to specify relations, we will only get the 
\&  # immediate glosses of the two wps entries. The default weight and
\&  # relation appear in $weight and $relation \- these can be modified
\&  # via a configuration file. 
\&
\&  my ($wps1gloss, $wps2gloss, $weight, $relation ) = $obj \-> getSuperGlosses ($wps1, $wps2);
\&  print "$wps1gloss\->[0]\en";
\&  print "$wps2gloss\->[0]\en";
\&  print "$weight\->[0]\en";
\&  print "$relation\->[0]\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Introduction"
.IX Subsection "Introduction"
This class is derived from (i.e., is a sub-class of) WordNet::Similarity. Two
of the measures of similarity, provided in this package, viz. WordNet::Similarity::lesk
and WordNet::Similarity::vector deal with WordNet glosses. This module provides
methods for easy access to the required glosses.
.SS "Methods"
.IX Subsection "Methods"
This module inherits all the methods of WordNet::Similarity.  Additionally,
the following methods are also defined.
.PP
\fIPublic methods\fR
.IX Subsection "Public methods"
.ie n .IP "$measure\->\fIsetPosList()\fR" 4
.el .IP "\f(CW$measure\fR\->\fIsetPosList()\fR" 4
.IX Item "$measure->setPosList()"
Specifies the parts of speech that measures derived from this module
support (namely, nouns, verbs, adjectives and adverbs).
.Sp
parameters: none
.Sp
returns: true
.ie n .IP "$self\->\fItraceOptions()\fR" 4
.el .IP "\f(CW$self\fR\->\fItraceOptions()\fR" 4
.IX Item "$self->traceOptions()"
Overrides method of same name in WordNet::Similarity.  Prints module-specific
configuration options to the trace string (if tracing is on).  GlossFinder
supports module specific options: relation, stop and stem.
.Sp
Parameters: none
.Sp
Returns: nothing
.ie n .IP "$self\->configure($file)" 4
.el .IP "\f(CW$self\fR\->configure($file)" 4
.IX Item "$self->configure($file)"
Overrides the configure method in WordNet::Similarity. This method loads
various data files, such as the stop words and relations.
.Sp
Parameters: \f(CW$file\fR \*(-- path of the configuration file.
.Sp
Returns: nothing
.ie n .IP "$self\->getSuperGlosses($wps1, $wps2)" 4
.el .IP "\f(CW$self\fR\->getSuperGlosses($wps1, \f(CW$wps2\fR)" 4
.IX Item "$self->getSuperGlosses($wps1, $wps2)"
This method returns a list of large blocks of concatenated glosses (super-gloss) for
each specified synset. A super-gloss is the block of text formed by concatenating the
glosses of a synset with glosses of synsets related to it in WordNet. \*(L"Related\*(R"
synsets are identified by specific relations specified in the \*(L"relations\*(R" file.
If no relations file was specified in the configuration, only the gloss of that
synset is returned.
.Sp
Parameters: wps1 and wps2 \*(-- two synsets.
.Sp
Returns: List of superglosses for both synsets (2\-D array).
.PP
\fIPrivate Methods\fR
.IX Subsection "Private Methods"
.ie n .IP "$self\->\fI_loadRelationFile()\fR" 4
.el .IP "\f(CW$self\fR\->\fI_loadRelationFile()\fR" 4
.IX Item "$self->_loadRelationFile()"
This method loads relations from a relation file.
.Sp
Parameters: none
.Sp
Returns: nothing
.SS "Discussion"
.IX Subsection "Discussion"
Many of the methods in this module can work with either offsets or
wps strings internally.  There are several interesting consequences
of each mode.
.IP "1." 4
An offset is not a unique identifier for a synset, but neither is
a wps string.  An offset only indicates a byte offset in one of the
WordNet data files (data.noun, data.verb, etc. on Unix-like systems).
An offset along with a part of speech, however, does uniquely identify
a synset.
.Sp
A word#pos#sense string, on the other hand, is the opposite extreme.
A word#pos#sense string is an identifier for a unique word sense.  A
synset can have several word senses in it (i.e., a synset is a set
of word senses that are synonymous).  The synset {beer_mug#n#1, stein#n#1}
has two word senses.  The wps strings 'beer_mug#n#1' and 'stein#n#1' can
both be used to refer to the synset.  For simplicity, we usually just
use the first wps string when referring to the synset.  N.B., the
wps representation was developed by WordNet::QueryData.
.IP "2." 4
Early versions of WordNet::Similarity::* used offsets internally for
finding paths, hypernym trees, subsumers, etc.  The module WordNet::QueryData
that is used by Similarity, however, accepts only wps strings as input
to its querySense method, which is used to find hypernyms.  We have found
that it is more efficient (faster) to use wps strings internally.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Ted Pedersen, University of Minnesota Duluth
\& tpederse at d.umn.edu
\&
\& Siddharth Patwardhan, University of Utah, Salt Lake City
\& sidd at cs.utah.edu
.Ve
.SH "BUGS"
.IX Header "BUGS"
None.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIWordNet::Similarity\fR\|(3)
\&\fIWordNet::Similarity::vector\fR\|(3)
\&\fIWordNet::Similarity::lesk\fR\|(3)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005, Ted Pedersen and Siddharth Patwardhan
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0
or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0 General Public License
for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along
with this program; if not, write to
.PP
.Vb 3
\&    The Free Software Foundation, Inc.,
\&    59 Temple Place \- Suite 330,
\&    Boston, MA  02111\-1307, USA.
.Ve
.PP
Note: a copy of the \s-1GNU\s0 General Public License is available on the web
at <http://www.gnu.org/licenses/gpl.txt> and is included in this
distribution as \s-1GPL\s0.txt.
