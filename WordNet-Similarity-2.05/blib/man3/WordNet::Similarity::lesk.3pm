.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WordNet::Similarity::lesk 3pm"
.TH WordNet::Similarity::lesk 3pm "2008-05-23" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WordNet::Similarity::lesk \- Perl module for computing semantic relatedness
of word senses using gloss overlaps as described by Banerjee and Pedersen
(2002) \-\- a method that adapts the Lesk approach to WordNet.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use WordNet::Similarity::lesk;
\&
\&  use WordNet::QueryData;
\&
\&  my $wn = WordNet::QueryData\->new();
\&
\&  my $lesk = WordNet::Similarity::lesk\->new($wn);
\&
\&  my $value = $lesk\->getRelatedness("car#n#1", "bus#n#2");
\&
\&  ($error, $errorString) = $lesk\->getError();
\&
\&  die "$errorString\en" if($error);
\&
\&  print "car (sense 1) <\-> bus (sense 2) = $value\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Lesk (1985) proposed that the relatedness of two words is proportional to
to the extent of overlaps of their dictionary definitions. Banerjee and
Pedersen (2002) extended this notion to use WordNet as the dictionary
for the word definitions. This notion was further extended to use the rich
network of relationships between concepts present is WordNet. This adapted
lesk measure has been implemented in this module.
.SS "Methods"
.IX Subsection "Methods"
.ie n .IP "$measure\->initialize($file)" 4
.el .IP "\f(CW$measure\fR\->initialize($file)" 4
.IX Item "$measure->initialize($file)"
Overrides the initialize method in the parent class (GlossFinder.pm). This method
essentially initializes the measure for use.
.Sp
Parameters: \f(CW$file\fR \*(-- configuration file.
.Sp
Returns: none.
.ie n .IP "$lesk\->\fItraceOptions()\fR" 4
.el .IP "\f(CW$lesk\fR\->\fItraceOptions()\fR" 4
.IX Item "$lesk->traceOptions()"
This method is internally called to determine the extra options
specified by this measure (apart from the default options specified
in the WordNet::Similarity base class).
.Sp
Parameters: none.
.Sp
Returns: none.
.ie n .IP "$lesk\->getRelatedness" 4
.el .IP "\f(CW$lesk\fR\->getRelatedness" 4
.IX Item "$lesk->getRelatedness"
Computes the relatedness of two word senses using the Extended Gloss
Overlaps algorithm.
.Sp
Parameters: two word senses in \*(L"word#pos#sense\*(R" format.
.Sp
Returns: Unless a problem occurs, the return value is the relatedness
score, which is greater-than or equal-to 0. If an error occurs,
then the error level is set to non-zero and an error
string is created (see the description of \fIgetError()\fR).
.SS "Usage"
.IX Subsection "Usage"
The semantic relatedness modules in this distribution are built as classes
that define the following methods:
.PP
.Vb 4
\&  new()
\&  getRelatedness()
\&  getError()
\&  getTraceString()
.Ve
.PP
See the \fIWordNet::Similarity\fR\|(3) documentation for details of these methods.
.PP
\fITypical Usage Examples\fR
.IX Subsection "Typical Usage Examples"
.PP
To create an object of the lesk measure, we would have the following
lines of code in the Perl program.
.PP
.Vb 2
\&   use WordNet::Similarity::lesk;
\&   $measure = WordNet::Similarity::lesk\->new($wn, \*(Aq/home/sid/lesk.conf\*(Aq);
.Ve
.PP
The reference of the initialized object is stored in the scalar variable
\&'$measure'. '$wn' contains a WordNet::QueryData object that should have been
created earlier in the program. The second parameter to the 'new' method is
the path of the configuration file for the lesk measure. If the 'new'
method is unable to create the object, '$measure' would be undefined. This,
as well as any other error/warning may be tested.
.PP
.Vb 3
\&   die "Unable to create object.\en" if(!defined $measure);
\&   ($err, $errString) = $measure\->getError();
\&   die $errString."\en" if($err);
.Ve
.PP
To find the semantic relatedness of the first sense of the noun 'car' and
the second sense of the noun 'bus' using the measure, we would write
the following piece of code:
.PP
.Vb 1
\&   $relatedness = $measure\->getRelatedness(\*(Aqcar#n#1\*(Aq, \*(Aqbus#n#2\*(Aq);
.Ve
.PP
To get traces for the above computation:
.PP
.Vb 1
\&   print $measure\->getTraceString();
.Ve
.PP
However, traces must be enabled using configuration files. By default
traces are turned off.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
The behavior of the measures of semantic relatedness can be controlled by
using configuration files. These configuration files specify how certain
parameters are initialized within the object. A configuration file may be
specified as a parameter during the creation of an object using the new
method. The configuration files must follow a fixed format.
.PP
Every configuration file starts with the name of the module \s-1ON\s0 \s-1THE\s0 \s-1FIRST\s0 \s-1LINE\s0
of the file. For example, a configuration file for the lesk module will have
on the first line 'WordNet::Similarity::lesk'. This is followed by the various
parameters, each on a new line and having the form 'name::value'. The
\&'value' of a parameter is optional (in case of boolean parameters). In case
\&'value' is omitted, we would have just 'name::' on that line. Comments are
supported in the configuration file. Anything following a '#' is ignored till
the end of the line.
.PP
The module parses the configuration file and recognizes the following
parameters:
.IP "trace" 4
.IX Item "trace"
The value of this parameter specifies the level of tracing that should
be employed for generating the traces. This value
is an integer equal to 0, 1, or 2. If the value is omitted, then the
default value, 0, is used. A value of 0 switches tracing off. A value
of 1 or 2 switches tracing on.  A value of 1 displays as
traces only the gloss overlaps found. A value of 2 displays as traces all
the text being compared.
.IP "cache" 4
.IX Item "cache"
The value of this parameter specifies whether or not caching of the
relatedness values should be performed.  This value is an
integer equal to  0 or 1.  If the value is omitted, then the default
value, 1, is used. A value of 0 switches caching 'off', and
a value of 1 switches caching 'on'.
.IP "maxCacheSize" 4
.IX Item "maxCacheSize"
The value of this parameter indicates the size of the cache, used for
storing the computed relatedness value. The specified value must be
a non-negative integer.  If the value is omitted, then the default
value, 5,000, is used. Setting maxCacheSize to zero has
the same effect as setting cache to zero, but setting cache to zero is
likely to be more efficient.  Caching and tracing at the same time can result
in excessive memory usage because the trace strings are also cached.  If
you intend to perform a large number of relatedness queries, then you
might want to turn tracing off.
.IP "relation" 4
.IX Item "relation"
The value of this parameter is the path to a file that contains a list of
WordNet relations.  The path may be either an absolute path or a relative
path.
.Sp
The lesk measure combines glosses of synsets related to the target
synsets by these relations and then searches for overlaps in these
\&\*(L"super-glosses.\*(R"
.Sp
\&\s-1WARNING:\s0 the format of the relation file is different for the vector and lesk
measures.
.IP "stop" 4
.IX Item "stop"
The value of this parameter the path of a file containing a list of stop
words that should be ignored in the glosses.  The path may be either an
absolute path or a relative path.
.IP "stem" 4
.IX Item "stem"
The value of this parameter indicates whether or not stemming should be
performed.  The value must be an integer equal to 0 or 1.  If the
value is omitted, then the default value, 0, is used.
A value of 1 switches 'on' stemming, and a value of 0 switches stemming
\&'off'. When stemming is enabled, all the words of the
glosses are stemmed before their vectors are created for the vector
measure or their overlaps are compared for the lesk measure.
.IP "normalize" 4
.IX Item "normalize"
The value of this parameter indicates whether or not normalization of
scores is performed.  The value must be an integer equal to 0 or 1.  If
the value is omitted, then the default value, 0, is assumed. A value of
1 switches 'on' normalizing of the score, and a value of 0 switches
normalizing 'off'. When normalizing is enabled, the score obtained by
counting the gloss overlaps is normalized by the size of the glosses.
The details are described in Banerjee and Pedersen (2002).
.SH "RELATION FILE FORMAT"
.IX Header "RELATION FILE FORMAT"
The relation file starts with the string \*(L"RelationFile\*(R" on the first line
of the file. Following this, on each consecutive line, a relation is specified
in the form \-\-
.PP
func(func(func... (func)...))\-func(func(func... (func)...)) [weight]
.PP
Where \*(L"func\*(R" can be any one of the following functions:
.PP
.Vb 10
\&  hype() = Hypernym of
\&  hypo() = Hyponym of
\&  holo() = Holonym of
\&  mero() = Meronym of
\&  attr() = Attribute of
\&  also() = Also see
\&  sim() = Similar
\&  enta() = Entails
\&  caus() = Causes
\&  part() = Particle
\&  pert() = Pertainym of
\&  glos = gloss (without example)
\&  example = example (from the gloss)
\&  glosexample = gloss + example
\&  syns = synset of the concept
.Ve
.PP
Each of these specifies a WordNet relation. And the outermost function in the
nesting can only be one of glos, example, glosexample or syns. The set of
functions to the left of the \*(L"\-\*(R" are applied to the first word sense. The
functions to the right of the \*(L"\-\*(R" are applied to the second word sense. An
optional weight can be specified to weigh the contribution of that relation
in the overall score.
.PP
For example,
.PP
.Vb 1
\& glos(hype(hypo))\-example(hype) 0.5
.Ve
.PP
means that the gloss of the hypernym of the hyponym of the first synset is
overlapped with the example of the hypernym of the second synset to get the
lesk score. This score is weighted 0.5. If \*(L"glos\*(R", \*(L"example\*(R", \*(L"glosexample\*(R"
or \*(L"syns\*(R" is not provided as the outermost function of the nesting, the
measure assumes \*(L"glos\*(R" as the default.
.PP
So,
.PP
.Vb 1
\& glos(hypo(also))\-glos(holo(attr))
.Ve
.PP
and
.PP
.Vb 1
\& hypo(also)\-holo(attr)
.Ve
.PP
are treated the same by the measure.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIWordNet::Similarity\fR\|(3), \fIWordNet::QueryData\fR\|(3)
.PP
http://www.cs.utah.edu/~sidd
.PP
http://wordnet.princeton.edu
.PP
http://www.ai.mit.edu/~jrennie/WordNet
.PP
http://groups.yahoo.com/group/wn\-similarity
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Ted Pedersen, University of Minnesota Duluth
\& tpederse at d.umn.edu
\&
\& Satanjeev Banerjee, Carnegie Mellon University, Pittsburgh
\& banerjee+ at cs.cmu.edu
\&
\& Siddharth Patwardhan, University of Utah, Salt Lake City
\& sidd at cs.utah.edu
.Ve
.SH "BUGS"
.IX Header "BUGS"
None.
.PP
To report bugs, go to http://groups.yahoo.com/group/wn\-similarity/ or
e\-mail \*(L"tpederse\ at\ d.umn.edu\*(R".
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (c) 2005, Ted Pedersen, Satanjeev Banerjee and Siddharth Patwardhan
.PP
This program is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the
\&\s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License
along with this program; if not, write to
.PP
.Vb 3
\&   The Free Software Foundation, Inc.,
\&   59 Temple Place \- Suite 330,
\&   Boston, MA  02111\-1307, USA.
.Ve
.PP
Note: a copy of the \s-1GNU\s0 General Public License is available on the web
at <http://www.gnu.org/licenses/gpl.txt> and is included in this
distribution as \s-1GPL\s0.txt.
