.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WordNet::Similarity 3pm"
.TH WordNet::Similarity 3pm "2008-05-30" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WordNet::Similarity \- Perl modules for computing measures of semantic
relatedness.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Basic Usage Example"
.IX Subsection "Basic Usage Example"
.Vb 1
\&  use WordNet::QueryData;
\&
\&  use WordNet::Similarity::path;
\&
\&  my $wn = WordNet::QueryData\->new;
\&
\&  my $measure = WordNet::Similarity::path\->new ($wn);
\&
\&  my $value = $measure\->getRelatedness("car#n#1", "bus#n#2");
\&
\&  my ($error, $errorString) = $measure\->getError();
\&
\&  die $errorString if $error;
\&
\&  print "car (sense 1) <\-> bus (sense 2) = $value\en";
.Ve
.SS "Using a configuration file to initialize the measure"
.IX Subsection "Using a configuration file to initialize the measure"
.Vb 1
\&  use WordNet::Similarity::path;
\&
\&  my $sim = WordNet::Similarity::path\->new($wn, "mypath.cfg");
\&
\&  my $value = $sim\->getRelatedness("dog#n#1", "cat#n#1");
\&
\&  ($error, $errorString) = $sim\->getError();
\&
\&  die $errorString if $error;
\&
\&  print "dog (sense 1) <\-> cat (sense 1) = $value\en";
.Ve
.SS "Printing traces"
.IX Subsection "Printing traces"
.Vb 1
\&  print "Trace String \-> ".($sim\->getTraceString())."\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Introduction"
.IX Subsection "Introduction"
We observe that humans find it extremely easy to say if two words are
related and if one word is more related to a given word than another. For
example, if we come across two words, 'car' and 'bicycle', we know they
are related as both are means of transport. Also, we easily observe that
\&'bicycle' is more related to 'car' than 'fork' is. But is there some way to
assign a quantitative value to this relatedness? Some ideas have been put
forth by researchers to quantify the concept of relatedness of words, with
encouraging results.
.PP
Eight of these different measures of relatedness have been implemented in
this software package. A simple edge counting measure and a random measure
have also been provided. These measures rely heavily on the vast store of
knowledge available in the online electronic dictionary \*(-- WordNet. So, we
use a Perl interface for WordNet called WordNet::QueryData to make it
easier for us to access WordNet. The modules in this package \s-1REQUIRE\s0 that
the WordNet::QueryData module be installed on the system before these
modules are installed.
.SS "Function"
.IX Subsection "Function"
The following function is defined:
.ie n .IP "addConfigOption ($name, $required, $type, $default_val)" 4
.el .IP "addConfigOption ($name, \f(CW$required\fR, \f(CW$type\fR, \f(CW$default_val\fR)" 4
.IX Item "addConfigOption ($name, $required, $type, $default_val)"
Adds the configuration option, \f(CW$name\fR, to the list of known config
options (cf. \fIconfigure()\fR).  If \f(CW$required\fR is true, then the option
requires a value; otherwise, the value is optional, and the default
value \f(CW$default_val\fR is used if a value is not specified in the config
file.  \f(CW$type\fR is the type of value the option takes.  It can be
\&'i' for integer, 'f' for floating-point, 's' for string, or 'p' for
a file name.
.Sp
returns: nothing, but will \f(CW\*(C`die\*(C'\fR on error.  You can put the call to
this function in an \f(CW\*(C`eval\*(C'\fR block to trap the exception (N.B., the
\&\f(CW\*(C`eval BLOCK\*(C'\fR form of \f(CW\*(C`eval\*(C'\fR does not significantly degrade performance,
unlike the \f(CW\*(C`eval EXPR\*(C'\fR form of \f(CW\*(C`eval\*(C'\fR.  See \f(CW\*(C`perldoc \-f eval\*(C'\fR).
.SS "Methods"
.IX Subsection "Methods"
The following methods are defined in this package:
.PP
\fIPublic methods\fR
.IX Subsection "Public methods"
.ie n .IP "$obj\->new ($wn, $config_file)" 4
.el .IP "\f(CW$obj\fR\->new ($wn, \f(CW$config_file\fR)" 4
.IX Item "$obj->new ($wn, $config_file)"
The constructor for WordNet::Similarity::* objects.
.Sp
Parameters: \f(CW$wn\fR is a WordNet::QueryData object, \f(CW$config_file\fR is a
configuration file (optional).
.Sp
Return value: the new blessed object
.ie n .IP "$obj\->initialize ($config_file)" 4
.el .IP "\f(CW$obj\fR\->initialize ($config_file)" 4
.IX Item "$obj->initialize ($config_file)"
Performs some initialization on the module.
.Sp
Parameter: the location of a configuration file
.Sp
Returns: nothing
.ie n .IP "$obj\->configure($config_file)" 4
.el .IP "\f(CW$obj\fR\->configure($config_file)" 4
.IX Item "$obj->configure($config_file)"
Parses a configuration file.
.Sp
If you write a module and want to add a new configuration option, you
can use the addConfigOption function to specify the name and nature
of the option.
.Sp
The value of the option is place in \*(L"self\*(R": \f(CW$self\fR\->{optionname}.
.Sp
parameter: a file name
.Sp
returns: true if parsing of config file was successful, false on error
.ie n .IP "$obj\->\fIgetTraceString()\fR" 4
.el .IP "\f(CW$obj\fR\->\fIgetTraceString()\fR" 4
.IX Item "$obj->getTraceString()"
Returns the current trace string and resets the trace string to empty.  If
tracing is turned off, then an empty string will always be returned.
.ie n .IP "$obj\->\fIgetError()\fR" 4
.el .IP "\f(CW$obj\fR\->\fIgetError()\fR" 4
.IX Item "$obj->getError()"
Checks to see if any errors have occurred.
Returns a list of the form ($level,\ \f(CW$string\fR).  If \f(CW$level\fR is 0, then
no errors have occurred; if \f(CW$level\fR is non-zero, then an error has occurred.
A value of 1 is considered a warning, and a value of 2 is considered an
error.  If \f(CW$level\fR is non-zero, then \f(CW$string\fR will have a (hopefully)
meaningful error message.
.ie n .IP "$obj\->\fItraceOptions()\fR" 4
.el .IP "\f(CW$obj\fR\->\fItraceOptions()\fR" 4
.IX Item "$obj->traceOptions()"
Prints module-specific options to the trace string.  Any module that
adds configuration options via addConfigOption should override this
method.
.Sp
Options should be printed out using the following format:
.Sp
.Vb 1
\&  $self\->{traceString} .= "option_name :: $option_value\en"
.Ve
.Sp
Note that the option name is separated from its current value by a
space, two colons, and another space.  The string should be terminated
by a newline.
.Sp
Since multiple modules may be overriding this method, any module
that overrides this method should insure that the superclass'
method gets called as well.  You do this by putting this line at
the end of your method:
.Sp
.Vb 1
\&  $self\->SUPER::traceOptions();
.Ve
.Sp
returns: nothing
.ie n .IP "$obj\->parseWps($synset1, $synset2)" 4
.el .IP "\f(CW$obj\fR\->parseWps($synset1, \f(CW$synset2\fR)" 4
.IX Item "$obj->parseWps($synset1, $synset2)"
parameters: synset1, synset2
.Sp
returns: a reference to an array [$word1, \f(CW$pos1\fR, \f(CW$sense1\fR, \f(CW$offset1\fR, \f(CW$word2\fR,
\&\f(CW$pos2\fR, \f(CW$sense2\fR, \f(CW$offset2\fR] or undef
.Sp
This method checks the format of the two input synsets by calling
\&\fIvalidateSynset()\fR for each synset.
.Sp
If the synsets are in wps format, a reference to an array will be returned.
This array has the form [$word1, \f(CW$pos1\fR, \f(CW$sense1\fR, \f(CW$offset1\fR, \f(CW$word2\fR, \f(CW$pos2\fR,
\&\f(CW$sense2\fR, \f(CW$offset2\fR] where \f(CW$word1\fR is the word part of \f(CW$wps1\fR, \f(CW$pos1\fR, is the
part of speech of \f(CW$wps1\fR, \f(CW$sense1\fR is the sense from \f(CW$wps\fR.  \f(CW$offset1\fR is the
offset for \f(CW$wps1\fR.
.Sp
If an error occurs (such as a synset being poorly-formed), then undef
is returned, the error level is set to non-zero, and an error message is
appended to the error string.
.ie n .IP "$obj\->validateSynset($synset)" 4
.el .IP "\f(CW$obj\fR\->validateSynset($synset)" 4
.IX Item "$obj->validateSynset($synset)"
parameter: synset
.Sp
returns: a list or undef on error
.Sp
synset is a string in word#pos#sense format
.Sp
This method does the following:
.RS 4
.IP "1." 4
Verifies that the synset is well-formed (i.e., that it consists of three
parts separated by #s, the pos is one of {n, v, a, r} and that sense
is a natural number).  A synset that matches the pattern '[^\e#]+\e#[nvar]\e#\ed+'
is considered well-formed.
.IP "2." 4
Checks if the synset exists by trying to find the offset for the synset
.RE
.RS 4
.Sp
If any of these tests fails, then the error level is set to non-zero, a
message is appended to the error string, and undef is returned.
.Sp
If the synset is well-formed and exists, then a list is returned that
has the format ($word, \f(CW$pos\fR, \f(CW$sense\fR, \f(CW$offset\fR).
.RE
.ie n .IP "$obj\->getRelatedness($synset1, $synset2)" 4
.el .IP "\f(CW$obj\fR\->getRelatedness($synset1, \f(CW$synset2\fR)" 4
.IX Item "$obj->getRelatedness($synset1, $synset2)"
parameters: synset1, synset2
.Sp
returns: a relatedness score
.Sp
This is a virtual method. It must be overridden by a module that
is derived from this class. This method takes two synsets and 
returns a numeric value as their score of relatedness.
.ie n .IP "$obj\->printSet ($pos, $mode, @synsets)" 4
.el .IP "\f(CW$obj\fR\->printSet ($pos, \f(CW$mode\fR, \f(CW@synsets\fR)" 4
.IX Item "$obj->printSet ($pos, $mode, @synsets)"
If tracing is turned on, prints the contents of \f(CW@synsets\fR to the trace string.
The contents of \f(CW@synsets\fR can be either wps strings or offsets.  If they
are wps strings, then \f(CW$mode\fR must be the string 'wps'; if they are offsets,
then the mode must be 'offset'.  Please don't try to mix wps and offsets.
.Sp
Returns the string that was appended to the trace string.
.ie n .IP "$obj\->fetchFromCache($wps1, $wps2, $non_symmetric)" 4
.el .IP "\f(CW$obj\fR\->fetchFromCache($wps1, \f(CW$wps2\fR, \f(CW$non_symmetric\fR)" 4
.IX Item "$obj->fetchFromCache($wps1, $wps2, $non_symmetric)"
Looks for the relatedness value of ($wps1, \f(CW$wps2\fR) in the cache.  If
\&\f(CW$non_symmetric\fR is false (or isn't specified), then the cache is searched
for ($wps2, \f(CW$wps1\fR) if ($wps1, \f(CW$wps2\fR) isn't found.
.Sp
Returns: a relatedness value or undef if none found in the cache.
.ie n .IP "$obj\->storeToCache ($wps1, $wps2, $score)" 4
.el .IP "\f(CW$obj\fR\->storeToCache ($wps1, \f(CW$wps2\fR, \f(CW$score\fR)" 4
.IX Item "$obj->storeToCache ($wps1, $wps2, $score)"
Stores the relatedness value, \f(CW$score\fR, of ($wps1, \f(CW$wps2\fR) to the cache.
.Sp
Returns: nothing
.SS "Discussion"
.IX Subsection "Discussion"
This package consists of Perl modules along with supporting Perl programs
that implement the semantic relatedness measures described by Leacock Chodorow
(1998), Jiang Conrath (1997), Resnik (1995), Lin (1998), Wu Palmer (1993),
Hirst St-Onge (1998) the Extended Gloss Overlaps measure by Banerjee and 
Pedersen (2002) and a Gloss Vector measure recently introduced by Patwardhan 
and Pedersen. The package contains Perl modules designed as object classes with
methods that take as input two word senses. The semantic distance between these
word senses is returned by these methods. A quantitative measure of the degree 
to which two word senses are related has wide ranging applications in 
numerous areas, such as word sense disambiguation, information retrieval,
etc. For example, in order to determine which sense of a given word is being 
used in a particular context, the sense having the highest relatedness with 
its context word senses is most likely to be the sense being used. Similarly,
in information retrieval, retrieving documents containing highly related
concepts are more likely to have higher precision and recall values.
.PP
A command line interface to these modules is also present in the
package. The simple, user-friendly interface simply returns the relatedness
measure of two given words. Number of switches and options have been
provided to modify the output and enhance it with trace information and
other useful output. Support programs for generating information
content files from various corpora are also available in the package. The
information content files are required by three of the measures for
computing the relatedness of concepts.  There is also a tool to find the
depths of the taxonomies in WordNet.
.PP
\fIConfiguration files\fR
.IX Subsection "Configuration files"
.PP
The behavior of the measures of semantic relatedness can be controlled by
using configuration files. These configuration files specify how certain
parameters are initialized within the object. A configuration file may be
specified as a parameter during the creation of an object using the new
method. The configuration files must follow a fixed format.
.PP
Every configuration file starts with the name of the module \s-1ON\s0 \s-1THE\s0 \s-1FIRST\s0 \s-1LINE\s0
of the file. For example, a configuration file for the res module will have
on the first line 'WordNet::Similarity::res'. This is followed by the various
parameters, each on a new line and having the form 'name::value'. The
\&'value' of a parameter is optional (in case of boolean parameters). In case
\&'value' is omitted, we would have just 'name::' on that line. Comments are
supported in the configuration file. Anything following a '#' is ignored in
the configuration file.
.PP
Sample configuration files are present in the '/samples' subdirectory of
the package. Each of the modules has specific parameters that can be
set/reset using the configuration files. Please read the manpages or the
perldocs of the respective modules for details on the parameters specific
to each of the modules. For instance, 'man WordNet::Similarity::res' or
\&'perldoc WordNet::Similarity::res' should display the documentation for the
Resnik module.
The module parses the configuration file and recognizes the following 
parameters:
.IP "trace" 4
.IX Item "trace"
This option is supported by all measures.
.Sp
The value of this parameter specifies the level of tracing that should
be employed for generating the traces. This value
is an integer equal to 0, 1, or 2. If the value is omitted, then the
default value, 0, is used. A value of 0 switches tracing off. A value
of 1 or 2 switches tracing on.  The difference between a value of 1 or 2
depends upon the measure being used.
.Sp
For vector and lesk, a value of 1 displays as
traces only the gloss overlaps found. A value of 2 displays as traces all
the text being compared.
.Sp
For the res, lin, jcn, wup, lch, path, and hso
measures, a trace of level 1 means the synsets are represented as
word#pos#sense strings, while for level 2, the synsets are represented as
word#pos#offset strings.
.IP "cache" 4
.IX Item "cache"
This option is supported by all measures.
.Sp
The value of this parameter specifies whether or not caching of the
relatedness values should be performed.  This value is an
integer equal to  0 or 1.  If the value is omitted, then the default
value, 1, is used. A value of 0 switches caching 'off', and
a value of 1 switches caching 'on'.
.IP "maxCacheSize" 4
.IX Item "maxCacheSize"
This option is supported by all measures.
.Sp
The value of this parameter indicates the size of the cache, used for
storing the computed relatedness value. The specified value must be
a non-negative integer.  If the value is omitted, then the default
value, 5,000, is used. Setting maxCacheSize to zero has
the same effect as setting cache to zero, but setting cache to zero is
likely to be more efficient.  Caching and tracing at the same time can result
in excessive memory usage because the trace strings are also cached.  If
you intend to perform a large number of relatedness queries, then you
might want to turn tracing off.
.SS "Usage"
.IX Subsection "Usage"
The semantic relatedness modules in this distribution are built as classes.
The classes define four methods that are useful in finding relatedness
values for pairs of synsets.
.PP
.Vb 4
\&  new()
\&  getRelatedness()
\&  getError()
\&  getTraceString()
.Ve
.PP
\fITypical Usage Examples\fR
.IX Subsection "Typical Usage Examples"
.PP
To create an object of the Resnik measure, we would have the following
lines of code in the Perl program.
.PP
.Vb 2
\&   use WordNet::Similarity::res;
\&   $object = WordNet::Similarity::res\->new($wn, \*(Aq~/resnik.conf\*(Aq);
.Ve
.PP
The reference of the initialized object is stored in the scalar variable
\&'$object'. '$wn' contains a WordNet::QueryData object that should have been
created earlier in the program. The second parameter to the 'new' method is
the path of the configuration file for the resnik measure. If the 'new'
method is unable to create the object, '$object' would be undefined. This, as
well as any other error/warning may be tested.
.PP
.Vb 3
\&   die "Unable to create resnik object.\en" unless defined $object;
\&   ($err, $errString) = $object\->getError();
\&   die $errString."\en" if($err);
.Ve
.PP
To create a Leacock-Chodorow measure object, using default values, i.e. no
configuration file, we would have the following:
.PP
.Vb 2
\&   use WordNet::Similarity::lch;
\&   $measure = WordNet::Similarity::lch\->new($wn);
.Ve
.PP
To find the semantic relatedness of the first sense of the noun 'car' and
the second sense of the noun 'bus' using the resnik measure, we would write
the following piece of code:
.PP
.Vb 1
\&   $relatedness = $object\->getRelatedness(\*(Aqcar#n#1\*(Aq, \*(Aqbus#n#2\*(Aq);
.Ve
.PP
To get traces for the above computation:
.PP
.Vb 1
\&   print $object\->getTraceString();
.Ve
.PP
However, traces must be enabled using configuration files. By default
traces are turned off.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\&  Ted Pedersen, University of Minnesota Duluth
\&  tpederse at d.umn.edu
\&
\&  Siddharth Patwardhan, University of Utah, Salt Lake City
\&  sidd at cs.utah.edu
\&
\&  Jason Michelizzi, Univeristy of Minnesota Duluth
\&  mich0212 at d.umn.edu
\&
\&  Satanjeev Banerjee, Carnegie Mellon University, Pittsburgh
\&  banerjee+ at cs.cmu.edu
.Ve
.SH "BUGS"
.IX Header "BUGS"
None.
.PP
To submit a bug report, go to http://groups.yahoo.com/group/wn\-similarity or
send e\-mail to tpederse \fIat\fR d.umn.edu.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIWordNet::Similarity::jcn\fR\|(3), \fIWordNet::Similarity::res\fR\|(3),
\&\fIWordNet::Similarity::lin\fR\|(3), \fIWordNet::Similarity::lch\fR\|(3),
\&\fIWordNet::Similarity::hso\fR\|(3), \fIWordNet::Similarity::lesk\fR\|(3),
\&\fIWordNet::Similarity::wup\fR\|(3), \fIWordNet::Similarity::path\fR\|(3),
\&\fIWordNet::Similarity::random\fR\|(3), \fIWordNet::Similarity::ICFinder\fR\|(3),
\&\fIWordNet::Similarity::PathFinder\fR\|(3)
\&\fIWordNet::QueryData\fR\|(3)
.PP
http://www.cs.utah.edu/~sidd
.PP
http://wordnet.princeton.edu
.PP
http://www.ai.mit.edu/~jrennie/WordNet
.PP
http://groups.yahoo.com/group/wn\-similarity
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005, Ted Pedersen, Siddharth Patwardhan, Jason Michelizzi and Satanjeev Banerjee
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0
or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0 General Public License
for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along
with this program; if not, write to
.PP
.Vb 3
\&    The Free Software Foundation, Inc.,
\&    59 Temple Place \- Suite 330,
\&    Boston, MA  02111\-1307, USA.
.Ve
.PP
Note: a copy of the \s-1GNU\s0 General Public License is available on the web
at <http://www.gnu.org/licenses/gpl.txt> and is included in this
distribution as \s-1GPL\s0.txt.
